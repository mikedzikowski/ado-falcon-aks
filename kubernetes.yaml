trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

variables:
 # Falcon Client ID
 - name: fcsClientId
   value: '[REDACTED]'
 # Falcon Secret 
 - name: fscSecret
   value: '[REDACTED]'
 - name: fcsCID
   value: '[REDACTED]'
 - name: azureSubscription
   value: '[AZURE_SUBSCRIPTION_ID]'
 - name: clusterName
   value: 'your-aks-cluster-name'
 - name: clusterResourceGroup
   value: 'your-resource-group'
 - name: sensorRegistry
   value: 'registry.crowdstrike.com/falcon-sensor/us-1/release/falcon-sensor'
 - name: kacRegistry
   value: 'registry.crowdstrike.com/falcon-kac/us-1/release/falcon-kac'
 - name: iarRegistry
   value: 'registry.crowdstrike.com/falcon-imageanalyzer/us-1/release/falcon-imageanalyzer'
 - name: acrRegistry
   value: 'your-acr-registry.azurecr.io'
 - name: APP_ID
   value: '[REDACTED]'
 - name: CLIENT_SECRET
   value: '[REDACTED]'
 - name: TENANT_ID
   value: '[REDACTED]'
 - name: SUBSCRIPTION_ID
   value: '[REDACTED]'
 - name: DOCKER_USER
   value: 'your-docker-username'
 - name: DOCKER_PASSWORD
   value: '[REDACTED]'
 - name: DOCKER_EMAIL
   value: 'example@example.com'


steps:
- task: AzureCLI@2
  inputs:
      azureSubscription: '[AZURE_SUBSCRIPTION_ID]'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az aks create \
            --resource-group $CLUSTERRESOURCEGROUP \
            --name $CLUSTERNAME \
            --node-count 8 \
            --generate-ssh-keys
  displayName: 'Deploy Azure Kubernetes Service (AKS) Cluster'
  condition: eq(variables.deployNewCluster, true)

- task: AzureCLI@2
  inputs: 
    azureSubscription: '[AZURE_SUBSCRIPTION_ID]'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo $FCSCLIENTID 
      echo $FSCSECRET
      curl -sSL -o falcon-container-sensor-pull.sh https://github.com/CrowdStrike/falcon-scripts/releases/latest/download/falcon-container-sensor-pull.sh
      chmod 777 ./falcon-container-sensor-pull.sh
      export SENSOR=$(bash ./falcon-container-sensor-pull.sh -u $FCSCLIENTID -s $FSCSECRET --type falcon-sensor --list-tags)
      export LATEST_SENSOR_TAG=$(echo "$SENSOR" | jq -r '.tags | sort | last')
      export KAC=$(bash ./falcon-container-sensor-pull.sh -u $FCSCLIENTID -s $FSCSECRET --type falcon-kac --list-tags)
      export LATEST_KAC_TAG=$(echo "$KAC" | jq -r '.tags | sort | last')
      echo $LATEST_SENSOR_TAG
      echo $LATEST_KAC_TAG
      export PULLTOKEN=$(bash ./falcon-container-sensor-pull.sh -u $FCSCLIENTID -s $FSCSECRET --type falcon-sensor --get-pull-token)
      echo "##vso[task.setvariable variable=PULLTOKEN;isOutput=true]$PULLTOKEN"
  displayName: 'Gather CrowdStrike Falcon Cloud Security Information'

- task: AzureCLI@2
  inputs: 
    azureSubscription: '[AZURE_SUBSCRIPTION_ID]'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az account set --subscription $AZURESUBSCRIPTION
      az aks get-credentials --resource-group $CLUSTERRESOURCEGROUP --name $CLUSTERNAME --overwrite-existing
      kubectl apply -f  https://raw.githubusercontent.com/crowdstrike/vulnapp/main/vulnerable.example.yaml
  displayName: 'Deploy CrowdStrike Vulnapp'
  condition: eq(variables.deployVulnapp, true)

- task: AzureCLI@2
  inputs: 
    azureSubscription: '[AZURE_SUBSCRIPTION_ID]'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      curl -sSL -o falcon-container-sensor-pull.sh https://github.com/CrowdStrike/falcon-scripts/releases/latest/download/falcon-container-sensor-pull.sh
      chmod 777 ./falcon-container-sensor-pull.sh
      export SENSOR=$(bash ./falcon-container-sensor-pull.sh -u $FCSCLIENTID -s $FSCSECRET --type falcon-sensor --list-tags)
      export LATEST_SENSOR_TAG=$(echo "$SENSOR" | jq -r '.tags | sort | last')
      export KAC=$(bash ./falcon-container-sensor-pull.sh -u $FCSCLIENTID -s $FSCSECRET --type falcon-kac --list-tags)
      export LATEST_KAC_TAG=$(echo "$KAC" | jq -r '.tags | sort | last')
      echo $LATEST_SENSOR_TAG
      echo $LATEST_KAC_TAG
      export PULLTOKEN=$(bash ./falcon-container-sensor-pull.sh -u $FCSCLIENTID -s $FSCSECRET --type falcon-sensor --get-pull-token)
      az account set --subscription $AZURESUBSCRIPTION
      az aks get-credentials --resource-group $CLUSTERRESOURCEGROUP --name $CLUSTERNAME --overwrite-existing
       helm repo add crowdstrike https://crowdstrike.github.io/falcon-helm
       helm repo update 
       helm install falcon-kac crowdstrike/falcon-kac \
      -n falcon-kac --create-namespace \
      --set falcon.cid=$FCSCID \
      --set image.repository=$KACREGISTRY \
      --set image.tag=$LATEST_KAC_TAG \
      --set image.registryConfigJSON=$PULLTOKEN
  displayName: 'Deploy CrowdStrike Kubernetes Admisson Controller (KAC) to Azure Kubernetes Service Cluster'
  condition: eq(variables.deployKAC, true)

- task: AzureCLI@2
  inputs: 
    azureSubscription: '[AZURE_SUBSCRIPTION_ID]'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo $SENSORREGISTRY
      echo $FCSCLIENTID 
      echo $FSCSECRET
      curl -sSL -o falcon-container-sensor-pull.sh https://github.com/CrowdStrike/falcon-scripts/releases/latest/download/falcon-container-sensor-pull.sh
      chmod 777 ./falcon-container-sensor-pull.sh
      export SENSOR=$(bash ./falcon-container-sensor-pull.sh -u $FCSCLIENTID -s $FSCSECRET --type falcon-sensor --list-tags)
      export LATEST_SENSOR_TAG=$(echo "$SENSOR" | jq -r '.tags | sort | last')
      export PULLTOKEN=$(bash ./falcon-container-sensor-pull.sh -u $FCSCLIENTID -s $FSCSECRET --type falcon-sensor --get-pull-token)
      echo $PULLTOKEN
      az account set --subscription $AZURESUBSCRIPTION
      az aks get-credentials --resource-group $CLUSTERRESOURCEGROUP --name $CLUSTERNAME --overwrite-existing
      helm repo add crowdstrike https://crowdstrike.github.io/falcon-helm
      helm repo update
      helm upgrade --install falcon-helm crowdstrike/falcon-sensor \
      -n falcon-system --create-namespace \
      --set falcon.cid=$FCSCID \
      --set node.image.repository=$SENSORREGISTRY \
      --set node.image.tag=$LATEST_SENSOR_TAG \
      --set node.image.registryConfigJSON=$PULLTOKEN
  displayName: 'Deploy Falcon Sensor to Azure Kubernetes Service Cluster'
  condition: eq(variables.deploySensor, true)
  
- task: AzureCLI@2
  inputs: 
    azureSubscription: '[AZURE_SUBSCRIPTION_ID]'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo $FCSCLIENTID 
      echo $FSCSECRET
      curl -sSL -o falcon-container-sensor-pull.sh https://github.com/CrowdStrike/falcon-scripts/releases/latest/download/falcon-container-sensor-pull.sh
      chmod 777 ./falcon-container-sensor-pull.sh
      export IAR=$(bash ./falcon-container-sensor-pull.sh -u $FCSCLIENTID -s $FSCSECRET --type falcon-imageanalyzer --list-tags)
      export LATEST_IAR_TAG=$(echo "$IAR" | jq -r '.tags | sort | last')
      export PULLTOKEN=$(bash ./falcon-container-sensor-pull.sh -u $FCSCLIENTID -s $FSCSECRET --type falcon-imageanalyzer --get-pull-token)
      az account set --subscription $AZURESUBSCRIPTION
      az aks get-credentials --resource-group $CLUSTERRESOURCEGROUP --name $CLUSTERNAME --overwrite-existing
      helm repo add crowdstrike https://crowdstrike.github.io/falcon-helm
      helm repo update
      helm upgrade --install iar crowdstrike/falcon-image-analyzer -n falcon-image-analyzer --create-namespace \
      --set deployment.enabled=true \
      --set crowdstrikeConfig.clusterName=$CLUSTERNAME \
      --set crowdstrikeConfig.clientID=$FCSCLIENTID \
      --set crowdstrikeConfig.clientSecret=$FSCSECRET \
      --set crowdstrikeConfig.agentRegion=us-1 \
      --set image.registryConfigJSON=$PULLTOKEN \
      --set image.repository=$IARREGISTRY --set image.tag=$LATEST_IAR_TAG \
      --set crowdstrikeConfig.cid=$FCSCID
  displayName: 'Deploy Image Assessment at Runtime (IAR) to Azure Kubernetes Service Cluster'
  condition: eq(variables.deployIAR,true)

- task: AzureCLI@2
  inputs:
    azureSubscription: "[AZURE_SUBSCRIPTION_ID]"
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      echo "Logging into Azure..."
      az login --service-principal --username $(APP_ID) --password $(CLIENT_SECRET) --tenant $(TENANT_ID)
      az account set --subscription $(SUBSCRIPTION_ID)
  displayName: 'Deploy Self-hosted Registry Assessment (SHRA) - Azure Login'
  condition: eq(variables.deploySHRA,true)

- script: |
    echo "Logging into Azure Container Registry..."
    mv /home/vsts/.docker/config.json /home/vsts/.docker/backup_config.json
    docker logout $(ACRREGISTRY)
    docker login $(ACRREGISTRY) --username $(APP_ID) --password $(CLIENT_SECRET)
  displayName: 'Deploy Self-hosted Registry Assessment (SHRA) - Docker Login to Azure Container Registry'
  condition: eq(variables.deploySHRA,true)

- script: |
    echo "Fetching latest Falcon container SHRA images..."
    export FALCON_CLIENT_ID="$(FCSCLIENTID)"
    export FALCON_CLIENT_SECRET="$(FSCSECRET)"
    export FJC=$(bash ./falcon-container-sensor-pull.sh -u $FCSCLIENTID -s $FSCSECRET --type falcon-jobcontroller --list-tags)
    export FRAE=$(bash ./falcon-container-sensor-pull.sh -u $FCSCLIENTID -s $FSCSECRET --type falcon-registryassessmentexecutor --list-tags)
    ./falcon-container-sensor-pull.sh --client-id ${FALCON_CLIENT_ID} --client-secret ${FALCON_CLIENT_SECRET} --type falcon-jobcontroller
    ./falcon-container-sensor-pull.sh --client-id ${FALCON_CLIENT_ID} --client-secret ${FALCON_CLIENT_SECRET} --type falcon-registryassessmentexecutor
    export LATEST_FJC_TAG=$(echo "$FJC" | jq -r '.tags | sort | last')
    export LATEST_FRAE_TAG=$(echo "$FRAE" | jq -r '.tags | sort | last')
    echo $LATEST_FJC_TAG
    echo $LATEST_FRAE_TAG
    echo "Tagging and pushing FJC..."
    docker tag "registry.crowdstrike.com/falcon-selfhostedregistryassessment/release/falcon-jobcontroller:$LATEST_FJC_TAG" "$ACRREGISTRY/falcon-jobcontroller:$LATEST_FJC_TAG"
    docker push "$ACRREGISTRY/falcon-jobcontroller:$LATEST_FJC_TAG"
    echo "Tagging and pushing FRAE..."
    docker tag "registry.crowdstrike.com/falcon-selfhostedregistryassessment/release/falcon-registryassessmentexecutor:$LATEST_FRAE_TAG" "$ACRREGISTRY/falcon-registryassessmentexecutor:$LATEST_FRAE_TAG"
    docker push "$ACRREGISTRY/falcon-registryassessmentexecutor:$LATEST_FRAE_TAG"
  displayName: 'Deploy Self-hosted Registry Assessment (SHRA) - Pull, Tag, and Push SHRA Container Images'


- task: AzureCLI@2
  inputs: 
    azureSubscription: '[AZURE_SUBSCRIPTION_ID]'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Azure AKS 
      az account set --subscription $AZURESUBSCRIPTION
      az aks get-credentials --resource-group $CLUSTERRESOURCEGROUP --name $CLUSTERNAME --overwrite-existing
      # Create SHRA Namespace
      kubectl create namespace falcon-self-hosted-registry-assessment
      # Create PVC
      # kubectl apply -f $(Build.SourcesDirectory)/aks/azure-pvc.yaml
      # Create Secret 
      kubectl create secret docker-registry acr-secret --docker-server=$DOCKER_USER --docker-username=DOCKER_USER --docker-password=DOCKER_PASSWORD --docker-email=DOCKER_EMAIL --namespace=falcon-self-hosted-registry-assessment
      sleep 30
      # Deploy SHRA Using Helm
      helm version
      helm repo add crowdstrike https://crowdstrike.github.io/falcon-helm
      helm repo update
      helm upgrade --install -f $(Build.SourcesDirectory)/aks/values_override.yaml --create-namespace --namespace falcon-self-hosted-registry-assessment --wait falcon-shra crowdstrike/falcon-self-hosted-registry-assessment
  displayName: 'Deploy Self-hosted Registry Assessment (SHRA) to Azure Kubernetes Service Cluster'
  condition: eq(variables.deploySHRA,true)
